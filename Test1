vehicle = connect('/dev/ttyS0', baud=921600, wait_ready=True)  # Connecting to vehicle
print("Connected to vehicle!")
searchModeInit=0
algorithm_modes = ["Search", "Drop"]  # Algoritmanın modları
mode = algorithm_modes[0]

def mission(x, y, z):
    """
    Adds a takeoff command and four waypoint commands to the current mission.
    The waypoints are positioned to form a square of side length 2*aSize around the specified LocationGlobal (aLocation).
    The function assumes vehicle.commands matches the vehicle mission state
    (you must have called download at least once in the session and after clearing the mission)
    """

    cmds = vehicle.commands

    print(" Clear any existing commands")
    cmds.clear()

    print(" Define/add new commands.")
    # Add new commands. The meaning/order of the parameters is documented in the Command class.

    for new_point in range(len(x)):
        point = LocationGlobal(x[new_point], y[new_point], z[new_point])
        cmds.add(
            Command(0, 0, 0, mavutil.mavlink.MAV_FRAME_GLOBAL_RELATIVE_ALT, mavutil.mavlink.MAV_CMD_NAV_WAYPOINT, 0, 0,
                    0, 0, 0, 0, point.lat, point.lon, point.alt))

    # Dummy ending point
    point = LocationGlobal(x[-1], y[-1], z[-1])
    cmds.add(
        Command(0, 0, 0, mavutil.mavlink.MAV_FRAME_GLOBAL_RELATIVE_ALT, mavutil.mavlink.MAV_CMD_NAV_WAYPOINT, 0, 0, 0,
                0, 0, 0, point.lat, point.lon, point.alt))

    print("Waypoints are created!")
    print(" Upload new commands to vehicle")
    cmds.upload()
def directionAssignment(vehicle):
    x=[vehicle.location.global_relative_frame.lat + 0.01 * math.cos(vehicle.heading * math.pi / 180)]
    y=[vehicle.location.global_relative_frame.lon + 0.01 * math.sin(vehicle.heading * math.pi / 180)]
    z=[60]
    for i in range(0, 6):
        if i == 0 or i == 5:
            x.append(x[i] + 0.01 * math.cos(15 * math.pi / 180))
            y.append(y[i] + 0.01 * math.cos(105 * math.pi / 180))
            z.append(60)
        elif i == 1 or i == 4:
            x.append(x[i] + 0.01 * math.cos(0))
            y.append(y[i] + 0.01 * math.sin(0))
            z.append(60)
        else:
            x.append(x[i] + 0.01 * math.cos(15 * math.pi / 180))
            y.append(y[i] + 0.01 * math.cos(75 * math.pi / 180))
            z.append(60)
    return x,y,z


while True:
    if mode=='Search':
        if searchModeInit==0 and vehicle.VehicleMode=='AUTO':
            mission(directionAssignment(vehicle))
        if vehicle.commands.next ==len(vehicle.commands):
            mission((directionAssignment(vehicle))
